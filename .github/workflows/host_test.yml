name: Reusable mock test workflow for Swift Package


on:
  workflow_call:


env:
  SDK_VERSION: '1.1.0-alpha.6'
  LINUX_SDK: 'https://github.com/madmachineio/mm-sdk/releases/download/1.1.0-alpha.6/mm-sdk-1.1.0-alpha.6-ubuntu22.04-x64.tar.bz2'
  MACOS_X64_SDK: 'https://github.com/madmachineio/mm-sdk/releases/download/1.1.0-alpha.6/mm-sdk-1.1.0-alpha.6-macOS.zip'
  MACOS_ARM64_SDK: 'https://github.com/madmachineio/mm-sdk/releases/download/1.1.0-alpha.6/mm-sdk-1.1.0-alpha.6-macOS.zip'

  SWIFT_MACOS: 'https://download.swift.org/development/xcode/swift-DEVELOPMENT-SNAPSHOT-2024-10-30-a/swift-DEVELOPMENT-SNAPSHOT-2024-10-30-a-osx.pkg'
  SWIFT_LINUX: 'https://download.swift.org/development/ubuntu2204/swift-DEVELOPMENT-SNAPSHOT-2024-10-30-a/swift-DEVELOPMENT-SNAPSHOT-2024-10-30-a-ubuntu22.04.tar.gz'


jobs:
  mock_test:
    name: Test on ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04]
        # os: [macos-12, macos-13, macos-14]
        # swift: ["6.0"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check action type
        run: |
          echo "OS: $RUNNER_OS"
          echo "Repository: $GITHUB_REPOSITORY"
          echo "Commit: $GITHUB_SHA"
          echo "Branch: `git rev-parse --abbrev-ref HEAD`"

      # - name: Prepare Swift environment
      #   uses: swift-actions/setup-swift@v1
      #   with:
      #     swift-version: ${{ matrix.swift }}

      # - name: Get Swift version
      #   run: swift --version

      - name: Prepare Swift enviroment
        run: |
          if [ "$RUNNER_OS" == 'macOS' ];then
            if [ "$RUNNER_ARCH" == 'X64' ];then
              wget -q ${{ env.SWIFT_MACOS }} -O ~/swift.pkg
            elif [ "$RUNNER_ARCH" == 'ARM64' ];then
              wget -q ${{ env.SWIFT_MACOS }} -O ~/swift.pkg
            else
              echo "Unsupported ARCH $RUNNER_ARCH"
              exit 1
            fi
            sudo mkdir -p /Library/Developer/Toolchains
            sudo installer -pkg ~/swift.pkg -target /Library/Developer/Toolchains
          elif [ "$RUNNER_OS" == 'Linux' ];then 
            wget -q ${{ env.SWIFT_LINUX }} -O ~/swift.tar.gz
            mkdir ~/mm-sdk
            tar -zxvf ~/swift.tar.gz --strip-components 1 -C ~/mm-sdk
          fi

      - name: Prepare mm-sdk
        id: prepare-sdk
        run: |
          echo "Get mm-sdk on $RUNNER_OS $RUNNER_ARCH"
          if [ "$RUNNER_OS" == 'Linux' ];then
            wget ${{ env.LINUX_SDK }} -O ~/sdk.tar.bz2
            tar -jxvf ~/sdk.tar.bz2 -C ~/
          elif [ "$RUNNER_OS" == 'macOS' ];then
            if [ "$RUNNER_ARCH" == 'X64' ];then
              wget ${{ env.MACOS_X64_SDK }} -O ~/sdk.zip
            elif [ "$RUNNER_ARCH" == 'ARM64' ];then
              wget ${{ env.MACOS_ARM64_SDK }} -O ~/sdk.zip
            else
              echo "Unsupported ARCH $RUNNER_ARCH"
              exit 1
            fi
            unzip ~/sdk.zip -d ~/
          else
            echo "Unrecognized OS $RUNNER_OS"
            exit 1
          fi
          echo "SDK_VERSION=$(~/mm-sdk/usr/mm/mm --version)" >> $GITHUB_OUTPUT
      
      - name: Abort if mm-sdk version not match
        if: ${{ steps.prepare-sdk.outputs.SDK_VERSION != env.SDK_VERSION }}
        run: |
          echo "Required SDK version: ${{ env.SDK_VERSION }}"
          echo "Current SDK version: ${{ steps.prepare-sdk.outputs.SDK_VERSION }}"
          exit 1

      - name: Run mock test
        run: |
          cd $GITHUB_WORKSPACE
          rm -rf .build
          rm -rf Package.resolved
          rm -rf info.lcov
          ~/mm-sdk/usr/mm/mm host-test
          if [ ! -f "info.lcov" ]; then
            exit 1 
          fi

      - name: Upload code report
        uses: codecov/codecov-action@v4
        with:
          files: ./info.lcov