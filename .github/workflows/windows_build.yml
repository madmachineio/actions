name: Reusable windows build workflow


on:
  workflow_call:


# env:
#   SDK_VERSION: "1.1.0-alpha.8"
#   SDK_X64_WIN: ""
#   SDK_ARM64_WIN: ""

#   SWIFT_X64_WIN: "https://download.swift.org/development/windows10/swift-DEVELOPMENT-SNAPSHOT-2024-11-09-a/swift-DEVELOPMENT-SNAPSHOT-2024-11-09-a-windows10.exe"
#   SWIFT_ARM64_WIN: "https://download.swift.org/development/windows10-arm64/swift-DEVELOPMENT-SNAPSHOT-2024-11-09-a/swift-DEVELOPMENT-SNAPSHOT-2024-11-09-a-windows10-arm64.exe"


jobs:
  build:
    name: Build on ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2022]
        # swift: ["6.0"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check action type
        run: |
          echo "OS: $env:RUNNER_OS"
          echo "Repository: $env:GITHUB_REPOSITORY"
          echo "Commit: $env:GITHUB_SHA"
          echo "Branch: $(git rev-parse --abbrev-ref HEAD)"

      # - name: Prepare Swift environment
      #   uses: swift-actions/setup-swift@v1
      #   with:
      #     swift-version: ${{ matrix.swift }}

      # - name: Get Swift version
      #   run: swift --version

      - name: Prepare Swift enviroment
        run: |
          if ($env:RUNNER_ARCH -eq "X64") {
            $url = $env:SWIFT_X64_WIN
          } elseif ($env:RUNNER_ARCH -eq "ARM64") {
            $url = $env:SWIFT_ARM64_WIN
          } else {
            echo "Unsupported ARCH $env:RUNNER_ARCH"
            exit 1
          }

          $outputPath = "C:\swift.exe"
          Invoke-WebRequest -Uri $url -OutFile $outputPath
          Start-Process -FilePath "$outputPath" -ArgumentList "/silent", "/verysilent" -Wait
          Get-ChildItem "$env:SystemDrive\Users\runneradmin\AppData\Local\Programs\Swift\Toolchains\6.0.0+Asserts\usr"

      - name: Get Swift version
        run: |
          Start-Process -FilePath "$env:SystemDrive\Users\runneradmin\AppData\Local\Programs\Swift\Toolchains\6.0.0+Asserts\usr\bin\swiftc.exe" -ArgumentList "--version" -Wait

      # - name: Prepare mm-sdk
      #   id: prepare-sdk
      #   run: |
      #     echo "Get mm-sdk on $RUNNER_OS $RUNNER_ARCH"
      #     if [ "$RUNNER_OS" == 'Linux' ];then
      #       wget ${{ var.LINUX_SDK }} -O ~/sdk.tar.bz2
      #       tar -jxvf ~/sdk.tar.bz2 -C ~/
      #     elif [ "$RUNNER_OS" == 'macOS' ];then
      #       if [ "$RUNNER_ARCH" == 'X64' ];then
      #         wget ${{ var.SDK_X64_MACOS }} -O ~/sdk.zip
      #       elif [ "$RUNNER_ARCH" == 'ARM64' ];then
      #         wget ${{ var.SDK_ARM64_MACOS }} -O ~/sdk.zip
      #       else
      #         echo "Unsupported ARCH $RUNNER_ARCH"
      #         exit 1
      #       fi
      #       unzip ~/sdk.zip -d ~/
      #     else
      #       echo "Unrecognized OS $RUNNER_OS"
      #       exit 1
      #     fi
      #     echo "SDK_VERSION=$(~/mm-sdk/usr/mm/mm --version)" >> $GITHUB_OUTPUT
      
      # - name: Abort if mm-sdk version not match
      #   if: ${{ steps.prepare-sdk.outputs.SDK_VERSION != var.SDK_VERSION }}
      #   run: |
      #     echo "Required SDK version: ${{ var.SDK_VERSION }}"
      #     echo "Current SDK version: ${{ steps.prepare-sdk.outputs.SDK_VERSION }}"
      #     exit 1

      # - name: Build default project
      #   id: build-project
      #   run: |
      #     cd $GITHUB_WORKSPACE
      #     rm -rf .build
      #     rm -rf Package.resolved
      #     if [ -f "Package.swift" ]; then
      #       ~/mm-sdk/usr/mm/mm build
      #     fi
      #     rm -rf .build
      #     rm -rf Package.resolved
      #     echo "EXAMPLES=$(find . -maxdepth 1 -name "Examples")" >> $GITHUB_OUTPUT

      # - name: Build default examples
      #   if: ${{ steps.build-project.outputs.EXAMPLES != '' }}
      #   run: |
      #     REPO_ADDR=${GITHUB_REPOSITORY#*/}.git
      #     find $GITHUB_WORKSPACE/Examples -name "Package.swift" > $GITHUB_WORKSPACE/examples.txt
      #     dirarray=($(cat $GITHUB_WORKSPACE/examples.txt))

      #     for item in "${dirarray[@]}"; do
      #       example_path=$(dirname "${item}")
      #       cd $example_path
      #       echo "In example path: $example_path"

      #       if [ -f "$GITHUB_WORKSPACE/Package.swift" ]; then
      #         LINE_NUMBER=$(sed -n "/$REPO_ADDR/=" ./Package.swift)
      #         if [ -n "$LINE_NUMBER" ]; then
      #           echo "Modifying line $LINE_NUMBER from:"
      #           cat ./Package.swift | head -n "$LINE_NUMBER" | tail -n 1
      #           sed -i'.bak' -e ""$LINE_NUMBER"s#madmachineio#"$GITHUB_REPOSITORY_OWNER"#g" ./Package.swift
      #           sed -i'.bak' -e ""$LINE_NUMBER"s#.branch(\"main\")#.revision(\"$GITHUB_SHA\")#g" ./Package.swift
      #           if [ "$RUNNER_OS" == 'Linux' ]; then
      #             sed -i'.bak' -e ""$LINE_NUMBER"s#branch:\s*\"main\"#revision: \"$GITHUB_SHA\"#g" ./Package.swift
      #           elif [ "$RUNNER_OS" == 'macOS' ]; then
      #             sed -i'.bak' -e ""$LINE_NUMBER"s#branch: *\"main\"#revision: \"$GITHUB_SHA\"#g" ./Package.swift
      #           else
      #             echo "Unrecognized OS $RUNNER_OS"
      #             exit 1
      #           fi
      #           echo "to:"
      #           cat ./Package.swift | head -n "$LINE_NUMBER" | tail -n 1
      #         fi
      #       fi

      #       rm -rf .build
      #       rm -rf Package.resolved
      #       ~/mm-sdk/usr/mm/mm build
      #       rm -rf .build
      #       rm -rf Package.resolved
      #     done

      # - name: CI Build project
      #   run: |
      #     cd $GITHUB_WORKSPACE
      #     rm -rf .build
      #     rm -rf Package.resolved
      #     if [ -f "Package.swift" ]; then
      #       ~/mm-sdk/usr/mm/mm ci-build
      #     fi
      #     rm -rf .build
      #     rm -rf Package.resolved

      # - name: CI Build examples
      #   if: ${{ steps.build-project.outputs.EXAMPLES != '' }}
      #   run: |
      #     REPO_ADDR=${GITHUB_REPOSITORY#*/}.git
      #     dirarray=($(cat $GITHUB_WORKSPACE/examples.txt))

      #     for item in "${dirarray[@]}"; do
      #       example_path=$(dirname "${item}")
      #       cd $example_path
      #       echo "In example path: $example_path"

      #       rm -rf .build
      #       rm -rf Package.resolved
      #       ~/mm-sdk/usr/mm/mm ci-build
      #       rm -rf .build
      #       rm -rf Package.resolved

      #       cp -rf armv7em-none-none-eabi* $GITHUB_WORKSPACE
      #     done

      # - name: Upload artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: Binary build on ${{ matrix.os }}
      #     path: |
      #       armv7em-none-none-eabi
      #     retention-days: 7
